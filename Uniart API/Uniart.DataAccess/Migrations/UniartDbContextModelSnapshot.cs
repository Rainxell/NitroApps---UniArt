// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Uniart.DataAccess;

namespace Uniart.DataAccess.Migrations
{
    [DbContext(typeof(UniartDbContext))]
    partial class UniartDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Uniart.Entities.Artista", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Artistas");
                });

            modelBuilder.Entity("Uniart.Entities.Caracteristica_Opciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("Servicio_Caracteristica_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Servicio_Caracteristica_Id");

                    b.ToTable("Caracteristicas_Opciones");
                });

            modelBuilder.Entity("Uniart.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Artista_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Usuario_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Artista_Id");

                    b.HasIndex("Usuario_Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Uniart.Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Pais_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Pais_id");

                    b.ToTable("Ciudades");
                });

            modelBuilder.Entity("Uniart.Entities.Comision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("Fecha_entrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha_fin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha_inicio")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Monto_pago_final")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Monto_pago_inicial")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Porc_avance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Review_Usuario_id")
                        .HasColumnType("int");

                    b.Property<int>("Servicio_Variacion_id")
                        .HasColumnType("int");

                    b.Property<int>("Servicio_id")
                        .HasColumnType("int");

                    b.Property<int>("Usuario_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Review_Usuario_id");

                    b.HasIndex("Servicio_Variacion_id");

                    b.HasIndex("Servicio_id");

                    b.HasIndex("Usuario_id");

                    b.ToTable("Comisiones");
                });

            modelBuilder.Entity("Uniart.Entities.Envio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Comision_Id")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url_imagen_enviada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Comision_Id");

                    b.ToTable("Envios");
                });

            modelBuilder.Entity("Uniart.Entities.Envio_Servicio_Ciudad", b =>
                {
                    b.Property<int>("Servicio_id")
                        .HasColumnType("int");

                    b.Property<int>("Ciudad_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Costo_envio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Servicio_id", "Ciudad_id");

                    b.HasIndex("Ciudad_id");

                    b.ToTable("Envios_Servicios_Ciudades");
                });

            modelBuilder.Entity("Uniart.Entities.Estilo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Estilos");
                });

            modelBuilder.Entity("Uniart.Entities.Formato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Formatos");
                });

            modelBuilder.Entity("Uniart.Entities.Licencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Licencias");
                });

            modelBuilder.Entity("Uniart.Entities.Mensaje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Chat_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Hora_mensaje")
                        .HasColumnType("datetime2");

                    b.Property<string>("Texto_mensaje")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("Chat_Id");

                    b.ToTable("Mensajes");
                });

            modelBuilder.Entity("Uniart.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("Uniart.Entities.Red_Social", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Redes_Sociales");
                });

            modelBuilder.Entity("Uniart.Entities.Red_Social_Artista", b =>
                {
                    b.Property<int>("Red_social_id")
                        .HasColumnType("int");

                    b.Property<int>("Artista_id")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Red_social_id", "Artista_id");

                    b.HasIndex("Artista_id");

                    b.ToTable("Redes_Sociales_Artistas");
                });

            modelBuilder.Entity("Uniart.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<short>("Rating_cliente")
                        .HasColumnType("smallint");

                    b.Property<int>("Valor_Negativo")
                        .HasColumnType("int");

                    b.Property<int>("Valor_Positivo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Uniart.Entities.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acerca_servicio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Artista_id")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duracion_esperada")
                        .HasColumnType("time");

                    b.Property<bool>("Es_virtual")
                        .HasColumnType("bit");

                    b.Property<int?>("Estilo_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Licencia_Id")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Porc_adelanto")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio_base")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Q_reviciones")
                        .HasColumnType("int");

                    b.Property<int>("Q_valoraciones")
                        .HasColumnType("int");

                    b.Property<short>("Rating")
                        .HasColumnType("smallint");

                    b.Property<int?>("Tecnica_Id")
                        .HasColumnType("int");

                    b.Property<bool>("acepta_rembolso")
                        .HasColumnType("bit");

                    b.Property<string>("url_imagen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Artista_id");

                    b.HasIndex("Estilo_Id");

                    b.HasIndex("Licencia_Id");

                    b.HasIndex("Tecnica_Id");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("Uniart.Entities.Servicio_Caracteristica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Servicios_Caracteristicas");
                });

            modelBuilder.Entity("Uniart.Entities.Servicio_Formato", b =>
                {
                    b.Property<int>("Formato_id")
                        .HasColumnType("int");

                    b.Property<int>("Servicio_id")
                        .HasColumnType("int");

                    b.HasKey("Formato_id", "Servicio_id");

                    b.HasIndex("Servicio_id");

                    b.ToTable("Servicios_Formatos");
                });

            modelBuilder.Entity("Uniart.Entities.Servicio_Tema", b =>
                {
                    b.Property<int>("Tema_id")
                        .HasColumnType("int");

                    b.Property<int>("Servicio_id")
                        .HasColumnType("int");

                    b.HasKey("Tema_id", "Servicio_id");

                    b.HasIndex("Servicio_id");

                    b.ToTable("Servicios_Temas");
                });

            modelBuilder.Entity("Uniart.Entities.Servicio_Variacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("Duracion_esperada")
                        .HasColumnType("time");

                    b.Property<bool>("Incluir_editable")
                        .HasColumnType("bit");

                    b.Property<int?>("Licencia_Id")
                        .HasColumnType("int");

                    b.Property<int>("Q_reviciones")
                        .HasColumnType("int");

                    b.Property<int?>("Servicio_Id")
                        .HasColumnType("int");

                    b.Property<string>("Url_imagen_referencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("precio_base")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Licencia_Id");

                    b.HasIndex("Servicio_Id");

                    b.ToTable("Servicios_Variaciones");
                });

            modelBuilder.Entity("Uniart.Entities.Tarjeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Cvc")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Fecha_vencimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre_completo")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Numero_tarjeta")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.ToTable("Tarjetas");
                });

            modelBuilder.Entity("Uniart.Entities.Tecnica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Tecnicas");
                });

            modelBuilder.Entity("Uniart.Entities.Tema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Temas");
                });

            modelBuilder.Entity("Uniart.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Uniart.Entities.Usuario_Tarjeta", b =>
                {
                    b.Property<int>("Tarjeta_id")
                        .HasColumnType("int");

                    b.Property<int>("Usuario_id")
                        .HasColumnType("int");

                    b.HasKey("Tarjeta_id", "Usuario_id");

                    b.HasIndex("Usuario_id");

                    b.ToTable("Usuarios_Tarjetas");
                });

            modelBuilder.Entity("Uniart.Entities.Valoracion", b =>
                {
                    b.Property<int>("Usuario_id")
                        .HasColumnType("int");

                    b.Property<int>("Review_id")
                        .HasColumnType("int");

                    b.Property<bool>("Es_like")
                        .HasColumnType("bit");

                    b.HasKey("Usuario_id", "Review_id");

                    b.HasIndex("Review_id");

                    b.ToTable("Valoraciones");
                });

            modelBuilder.Entity("Uniart.Entities.Variacion_Detalle", b =>
                {
                    b.Property<int>("Servicio_Variacion_id")
                        .HasColumnType("int");

                    b.Property<int>("Caracteristica_Opciones_id")
                        .HasColumnType("int");

                    b.HasKey("Servicio_Variacion_id", "Caracteristica_Opciones_id");

                    b.HasIndex("Caracteristica_Opciones_id");

                    b.ToTable("Variacion_Detalles");
                });

            modelBuilder.Entity("Uniart.Entities.identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Uniart.Entities.identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Ciudad_id")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha_registro")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Q_valoraciones")
                        .HasColumnType("int");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Url_foto_perfil")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Url_foto_portada")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("esArtista")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Ciudad_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Uniart.Entities.identity.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Uniart.Entities.identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Uniart.Entities.identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Uniart.Entities.identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Uniart.Entities.identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uniart.Entities.Artista", b =>
                {
                    b.HasOne("Uniart.Entities.identity.ApplicationUser", "Artista_")
                        .WithMany("artistas")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Artista_");
                });

            modelBuilder.Entity("Uniart.Entities.Caracteristica_Opciones", b =>
                {
                    b.HasOne("Uniart.Entities.Servicio_Caracteristica", "Servicio_Caracteristica_")
                        .WithMany()
                        .HasForeignKey("Servicio_Caracteristica_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Servicio_Caracteristica_");
                });

            modelBuilder.Entity("Uniart.Entities.Chat", b =>
                {
                    b.HasOne("Uniart.Entities.Red_Social", "Artista_")
                        .WithMany()
                        .HasForeignKey("Artista_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Uniart.Entities.Usuario", "Usuario_")
                        .WithMany()
                        .HasForeignKey("Usuario_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Artista_");

                    b.Navigation("Usuario_");
                });

            modelBuilder.Entity("Uniart.Entities.Ciudad", b =>
                {
                    b.HasOne("Uniart.Entities.Pais", "Pais")
                        .WithMany("Ciudades")
                        .HasForeignKey("Pais_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Uniart.Entities.Comision", b =>
                {
                    b.HasOne("Uniart.Entities.Review", "Review_id_Cliente")
                        .WithMany("Comisiones")
                        .HasForeignKey("Review_Usuario_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uniart.Entities.Servicio_Variacion", "Servicio_Variacio_")
                        .WithMany("ComisionSV")
                        .HasForeignKey("Servicio_Variacion_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uniart.Entities.Servicio", "Servicio_")
                        .WithMany("Comisiones")
                        .HasForeignKey("Servicio_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uniart.Entities.Usuario", "Usuario_")
                        .WithMany("ComisionesU")
                        .HasForeignKey("Usuario_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Review_id_Cliente");

                    b.Navigation("Servicio_");

                    b.Navigation("Servicio_Variacio_");

                    b.Navigation("Usuario_");
                });

            modelBuilder.Entity("Uniart.Entities.Envio", b =>
                {
                    b.HasOne("Uniart.Entities.Comision", "Comision_")
                        .WithMany()
                        .HasForeignKey("Comision_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Comision_");
                });

            modelBuilder.Entity("Uniart.Entities.Envio_Servicio_Ciudad", b =>
                {
                    b.HasOne("Uniart.Entities.Ciudad", "Ciudad")
                        .WithMany()
                        .HasForeignKey("Ciudad_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uniart.Entities.Servicio", "Servicio")
                        .WithMany("Envios_Servicios_Ciudades")
                        .HasForeignKey("Servicio_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ciudad");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Uniart.Entities.Mensaje", b =>
                {
                    b.HasOne("Uniart.Entities.Chat", "Chat_")
                        .WithMany()
                        .HasForeignKey("Chat_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chat_");
                });

            modelBuilder.Entity("Uniart.Entities.Red_Social_Artista", b =>
                {
                    b.HasOne("Uniart.Entities.Artista", "Artista_")
                        .WithMany("Redes_Sociales_Artistas")
                        .HasForeignKey("Artista_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uniart.Entities.Red_Social", "Red_Social")
                        .WithMany("Redes_Sociales_Artistas")
                        .HasForeignKey("Red_social_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Artista_");

                    b.Navigation("Red_Social");
                });

            modelBuilder.Entity("Uniart.Entities.Servicio", b =>
                {
                    b.HasOne("Uniart.Entities.Artista", "Artista")
                        .WithMany("Servicios")
                        .HasForeignKey("Artista_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uniart.Entities.Estilo", "Estilo_")
                        .WithMany()
                        .HasForeignKey("Estilo_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Uniart.Entities.Licencia", "Licencia_")
                        .WithMany()
                        .HasForeignKey("Licencia_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Uniart.Entities.Tecnica", "Tecnica_")
                        .WithMany()
                        .HasForeignKey("Tecnica_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Artista");

                    b.Navigation("Estilo_");

                    b.Navigation("Licencia_");

                    b.Navigation("Tecnica_");
                });

            modelBuilder.Entity("Uniart.Entities.Servicio_Formato", b =>
                {
                    b.HasOne("Uniart.Entities.Formato", "Formato_")
                        .WithMany("Servicios_Formatos")
                        .HasForeignKey("Formato_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uniart.Entities.Servicio", "Servicio_")
                        .WithMany("Servicios_Formatos")
                        .HasForeignKey("Servicio_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Formato_");

                    b.Navigation("Servicio_");
                });

            modelBuilder.Entity("Uniart.Entities.Servicio_Tema", b =>
                {
                    b.HasOne("Uniart.Entities.Servicio", "Servicio")
                        .WithMany("Servicios_Temas")
                        .HasForeignKey("Servicio_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uniart.Entities.Tema", "Tema")
                        .WithMany("Servicios_Temas")
                        .HasForeignKey("Tema_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Servicio");

                    b.Navigation("Tema");
                });

            modelBuilder.Entity("Uniart.Entities.Servicio_Variacion", b =>
                {
                    b.HasOne("Uniart.Entities.Licencia", "Licencia_")
                        .WithMany()
                        .HasForeignKey("Licencia_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Uniart.Entities.Servicio", "Servicio_")
                        .WithMany()
                        .HasForeignKey("Servicio_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Licencia_");

                    b.Navigation("Servicio_");
                });

            modelBuilder.Entity("Uniart.Entities.Usuario", b =>
                {
                    b.HasOne("Uniart.Entities.identity.ApplicationUser", "Usuario_")
                        .WithMany("usuarios")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario_");
                });

            modelBuilder.Entity("Uniart.Entities.Usuario_Tarjeta", b =>
                {
                    b.HasOne("Uniart.Entities.Tarjeta", "Tarjeta")
                        .WithMany("Usuarios_Tarjetas")
                        .HasForeignKey("Tarjeta_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uniart.Entities.Usuario", "Usuario")
                        .WithMany("Usuarios_Tarjetas")
                        .HasForeignKey("Usuario_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tarjeta");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Uniart.Entities.Valoracion", b =>
                {
                    b.HasOne("Uniart.Entities.Review", "Review")
                        .WithMany("Valoraciones")
                        .HasForeignKey("Review_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uniart.Entities.Usuario", "Usuario")
                        .WithMany("Valoraciones")
                        .HasForeignKey("Usuario_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Uniart.Entities.Variacion_Detalle", b =>
                {
                    b.HasOne("Uniart.Entities.Caracteristica_Opciones", "Caracteristica_Opciones")
                        .WithMany("Variacion_Detalles")
                        .HasForeignKey("Caracteristica_Opciones_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Uniart.Entities.Servicio_Variacion", "Servicio_Variacion")
                        .WithMany("Variacion_Detalles")
                        .HasForeignKey("Servicio_Variacion_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Caracteristica_Opciones");

                    b.Navigation("Servicio_Variacion");
                });

            modelBuilder.Entity("Uniart.Entities.identity.ApplicationUser", b =>
                {
                    b.HasOne("Uniart.Entities.Ciudad", "Ciudad_")
                        .WithMany("Ciudades")
                        .HasForeignKey("Ciudad_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ciudad_");
                });

            modelBuilder.Entity("Uniart.Entities.identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Uniart.Entities.identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uniart.Entities.identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Uniart.Entities.Artista", b =>
                {
                    b.Navigation("Redes_Sociales_Artistas");

                    b.Navigation("Servicios");
                });

            modelBuilder.Entity("Uniart.Entities.Caracteristica_Opciones", b =>
                {
                    b.Navigation("Variacion_Detalles");
                });

            modelBuilder.Entity("Uniart.Entities.Ciudad", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Uniart.Entities.Formato", b =>
                {
                    b.Navigation("Servicios_Formatos");
                });

            modelBuilder.Entity("Uniart.Entities.Pais", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Uniart.Entities.Red_Social", b =>
                {
                    b.Navigation("Redes_Sociales_Artistas");
                });

            modelBuilder.Entity("Uniart.Entities.Review", b =>
                {
                    b.Navigation("Comisiones");

                    b.Navigation("Valoraciones");
                });

            modelBuilder.Entity("Uniart.Entities.Servicio", b =>
                {
                    b.Navigation("Comisiones");

                    b.Navigation("Envios_Servicios_Ciudades");

                    b.Navigation("Servicios_Formatos");

                    b.Navigation("Servicios_Temas");
                });

            modelBuilder.Entity("Uniart.Entities.Servicio_Variacion", b =>
                {
                    b.Navigation("ComisionSV");

                    b.Navigation("Variacion_Detalles");
                });

            modelBuilder.Entity("Uniart.Entities.Tarjeta", b =>
                {
                    b.Navigation("Usuarios_Tarjetas");
                });

            modelBuilder.Entity("Uniart.Entities.Tema", b =>
                {
                    b.Navigation("Servicios_Temas");
                });

            modelBuilder.Entity("Uniart.Entities.Usuario", b =>
                {
                    b.Navigation("ComisionesU");

                    b.Navigation("Usuarios_Tarjetas");

                    b.Navigation("Valoraciones");
                });

            modelBuilder.Entity("Uniart.Entities.identity.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Uniart.Entities.identity.ApplicationUser", b =>
                {
                    b.Navigation("artistas");

                    b.Navigation("UserRoles");

                    b.Navigation("usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
